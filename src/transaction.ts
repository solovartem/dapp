const Tx = require("ethereumjs-tx").Transaction
const Web3 = require("web3")
const web3 = new Web3("https://rinkeby.infura.io/v3/d1d21a61b32a4f669b1438e9218cc279")

interface Transaction {
  nonce: string
  gasLimit: string
  gasPrice: string
  data: string
}

const tryCatch = async (f, x) => {
  try {
    return await f(x)
  } catch (error) {
    console.warn(error)
  }
}
const createContract = async () => {
  const account = "0x09893Aad261abE088c0fB516990b66D08c2F05f9"
  const privateAccountString = "CCBF88AC64D9755A5CC5298E201920262DA425094C08F95D2ABA0E69AEEFFC92"
  const bufferOfPrivateKey = Buffer.from(privateAccountString, "hex")

  const txCount = await web3.utils.toHex(web3.eth.getTransactionCount(account))
  const txData: Transaction = {
    nonce: txCount,
    gasLimit: "0xF4240",
    gasPrice: "0x2540BE400",
    data:
      "0x60806040526040518060400160405280600d81526020017f736d617274436f6e7472616374000000000000000000000000000000000000008152506000908051906020019061004f929190610062565b5034801561005c57600080fd5b50610107565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100a357805160ff19168380011785556100d1565b828001600101855582156100d1579182015b828111156100d05782518255916020019190600101906100b5565b5b5090506100de91906100e2565b5090565b61010491905b808211156101005760008160009055506001016100e8565b5090565b90565b61030f806101166000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063368b87721461003b578063ce6d41de146100f6575b600080fd5b6100f46004803603602081101561005157600080fd5b810190808035906020019064010000000081111561006e57600080fd5b82018360208201111561008057600080fd5b803590602001918460018302840111640100000000831117156100a257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610179565b005b6100fe610193565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561013e578082015181840152602081019050610123565b50505050905090810190601f16801561016b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b806000908051906020019061018f929190610235565b5050565b606060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561022b5780601f106102005761010080835404028352916020019161022b565b820191906000526020600020905b81548152906001019060200180831161020e57829003601f168201915b5050505050905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061027657805160ff19168380011785556102a4565b828001600101855582156102a4579182015b828111156102a3578251825591602001919060010190610288565b5b5090506102b191906102b5565b5090565b6102d791905b808211156102d35760008160009055506001016102bb565b5090565b9056fea265627a7a72315820a9d9767942265557e3261f6d264e7ed57b3b4584ec8ba98fffc3e6a3c8e89af664736f6c634300050c0032"
  }
  const tx = await new Tx(txData, { chain: "rinkeby", hardfork: "petersburg" })
  await tx.sign(bufferOfPrivateKey)
  const serializesTx = tx.serialize()
  const raw = "0x" + serializesTx.toString("hex")
  const txHash = await tryCatch(web3.eth.sendSignedTransaction, raw)
}

const smartContractAddress = "0x4317C9817F876600Dac7720D70f227946e35dbbf"
const contractAbi = [
  { constant: true, inputs: [], name: "getMessage", outputs: [{ internalType: "string", name: "", type: "string" }], payable: false, stateMutability: "view", type: "function" },
  { constant: false, inputs: [{ internalType: "string", name: "_message", type: "string" }], name: "setMessage", outputs: [], payable: false, stateMutability: "nonpayable", type: "function" }
]
const contract = new web3.eth.Contract(contractAbi, smartContractAddress)
contract.methods.getMessage().call((e, x) => console.log(x))
